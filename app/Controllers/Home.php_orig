<?php

namespace App\Controllers;

use App\Models\UserModel;

class Home extends BaseController
{
    protected $base;
    protected $user_model;

    function __construct()
    {
        helper(['form', 'url']);
        $session = \Config\Services::session();
        //$this->user_model = new UserModel();
        //$this->check_subscribe();
    }
    public function check_subscribe()
    {
        $this->get_scan_count(); //call scan count api and update particular store
        $plan_details = $this->user_model->get_store_plan($_GET['shop']);
        if (empty($plan_details)) {
            echo "<script>top.window.location='https://" . $_GET['shop'] . "/admin/apps/bigthinx-size-app/public/index.php/subscribe-app'</script>";
        } else {
            // echo "<pre>";
            // print_r($plan_details);
            // echo "</pre>";
            if ($plan_details[0]->scan_count == 0) {
                echo "<script>top.window.location='https://" . $_GET['shop'] . "/admin/apps/bigthinx-size-app/public/index.php/subscribe-app'</script>";
            } else if ($plan_details[0]->plan_validity <= date('Y-m-d')) {
                echo "<script>top.window.location='https://" . $_GET['shop'] . "/admin/apps/bigthinx-size-app/public/index.php/subscribe-app'</script>";
            }
        }

        // echo"<pre>"; print_r($plan_details); echo"</pre>";
    }
    public function index()
    {

        $countrows = $this->user_model->checktokens($_GET['shop']);
        if ($countrows < 1) {
            return redirect()->to('https://bigthinxapp.herokuapp.com/public/install?shop=' . $_GET['shop']);
        }

        $get_details = $this->user_model->get_tokens($_GET['shop']);
        $products =  $products = $this->common->rest_api('/admin/api/2021-01/products.json', array(), 'GET', $get_details->access_token, $_GET['shop']);


        $response = json_decode($products['body'], true);
        if (array_key_exists('errors', $response)) {
            echo esc("sorry but  i think there is an error. error is" . $response['errors']);

            return redirect()->to('https://bigthinxapp.herokuapp.com/public/install?shop=' . $_GET['shop']);

            // header("Location: install.php?shop=" . $_GET['shop']);
            exit();
        } else {



            echo view('templates/header');
            echo view('welcome_message');
            echo view('templates/footer');
            //return view('welcome_message');
        }
    }

    public function import_store_product()
    {

        //$this->base = new Auth();


        $data = array();
        $get_details = $this->user_model->get_tokens($_GET['shop']);


        $data['getsizepro'] = $this->user_model->get_assign_size_chart($_GET['shop']);






        // $script_url = 'https://bigthinxapp.herokuapp.com/public/js/front_shop.js';
        // $scriptData = array(
        //     'script_tag' => array(
        //         'event' => 'onload',
        //         'src' => $script_url
        //     )
        // );
        // $create_script = $this->common->rest_api('/admin/api/2022-04/script_tags.json', $scriptData, 'POST',$get_details->access_token, $_GET['shop']);
        // $create_script = json_decode($create_script['body'], true);
        // print_r($create_script);

        // $script_url = 'https://bigthinxapp.herokuapp.com/public/js/jquery-3.6.0.min.js';
        // $scriptData = array(
        //     'src' => $script_url
        // );
        // $get_script =  $this->common->rest_api('/admin/api/2022-04/script_tags.json', $scriptData, 'GET',$get_details->access_token, $_GET['shop']);
        // $get_script = json_decode($get_script['body'], true);

        // foreach ($get_script['script_tags'] as $script) {
        //     $delete_script =  $this->common->rest_api('/admin/api/2022-04/script_tags/' . $script['id'] . '.json', array(), 'DELETE',$get_details->access_token, $_GET['shop']);
        // }



        if ($this->request->getPost('assign_save')) {

            if (!empty($this->request->getPost('assign_pro'))) {
                foreach ($this->request->getPost('assign_pro') as $prokey => $product_id) {
                    $assign_array = array(
                        "product_id" => $product_id,
                        "size_chart_id" => $this->request->getPost('size_chart_name'),
                        "shop_url" => $_GET['shop'],
                        "assign_date" => date('Y-m-d')
                    );
                    $this->user_model->assign_size_chart($_GET['shop'], $assign_array);
                }
            }
            echo "<script>top.window.location='https://" . $_GET['shop'] . "/admin/apps/bigthinx-size-app/public/index.php/get-products?collectionparms=" . $this->request->getPost('get_coll') . "'</script>";
            exit();
        }

        //get store collections
        $collections = $this->common->rest_api('/admin/api/2022-04/custom_collections.json', array(), 'GET', $get_details->access_token, $_GET['shop']);
        $collections = json_decode($collections['body'], true);

        // echo "<pre>";
        // print_r($collections);
        // echo "</pre>";

        $coll_array = array();
        foreach ($collections['custom_collections'] as $collection_list) {
            $coll_array = array(
                "collection_id" => $collection_list['id'],
                "collections_name" => $collection_list['title'],
                "shop_url" => $_GET['shop']
            );
            $this->user_model->track_collections($coll_array, $_GET['shop']);
        }

        // $gql_query = array("query" => "{
        //     products(first:10,query:'vendor:vivo') {
        //     edges {
        //       node {
        //         id
        //         title
        //         description
        //         images(first:1) {
        //           edges {
        //             node {
        //               originalSrc
        //             }
        //           }
        //         }
        //         status
        //       }
        //     }
        //   }
        // }");

        // $graphql_pro = $this->common->graphql_api($gql_query, $_GET['shop'], $get_details->access_token);
        // $productsql = json_decode($graphql_pro['body'], true);

        // $products_edges = $productsql['data']['products'];

        // echo "<pre>";
        // print_r($products_edges);
        // echo "</pre>";

        $get_store_collections = $this->user_model->get_collections($_GET['shop']);
        $parma_array = array("limit" => 10);

        if ((isset($_GET['vendorname']) && $_GET['vendorname'] != "") && (isset($_GET['collectionparms']) && $_GET['collectionparms'] != "")) {
            // if (isset($_GET['collectionparms'])) {
            //$parma_array['collection_id'] = $_GET['collectionparms'];
            $titla = 'new simple test';
            //$colcturl = "/admin/api/2022-04/collections/" . $_GET['collectionparms'] . "/products.json?vendor=vivo";

            $colcturl = "/admin/api/2022-04/products.json";
            //$colcturl = "/admin/api/2022-04/products.json?collection_id=".$_GET['collectionparms']."&vendor=vivo";

            //'vendor' => $_GET['vendorname']

            $products = $this->common->rest_api($colcturl, array("collection_id" => $_GET['collectionparms'], 'vendor' => $_GET['vendorname'], "limit" => 10), 'GET', $get_details->access_token, $_GET['shop']);
            $product_list = json_decode($products['body'], true);
        } else {
            $product_list = array();
        }
        // echo $products;
        // echo "<pre>";
        // print_r($product_list);
        // echo "</pre>";


        // echo $products;

        // echo "<pre>";
        // print_r($products);
        // echo "</pre>"; 

        // echo "<pre>";
        // print_r($products_count);
        // echo "</pre>";



        $data['products'] = $product_list;
        $data['get_store_collections'] = $get_store_collections;
        if (!empty($product_list)) {
            $headers = $products['headers'];
            if (isset($headers['link'])) {
                $nextPageURL = $this->common->str_btwn($headers['link'], '<', '>');
                $nextPageURLparam = parse_url($nextPageURL);
                parse_str($nextPageURLparam['query'], $value);
                $data['page_info'] = $value['page_info'];
            }
            $data['headers_list'] = $headers;
        }
        $data['chart_details'] = array();
        if (isset($_GET['vid'])) {
            $data['chart_details'] = $this->user_model->get_store_chart($_GET['shop'], $_GET['vid']);
        }
        $data['vendors_list'] = $this->user_model->get_vendor_list($_GET['shop']);
        echo view('templates/header');
        echo view('products_list', $data);
        echo view('templates/footer');
        //return view('products_list', $data);
    }

    public function product_pagination()
    {

        $get_details = $this->user_model->get_tokens($_GET['url']);
        $shop_url = $_GET['url'];


        $rel = $_GET['rel'];
        $page_info = $_GET['page_info'];
        //get products 

        $page_array = array(
            'limit' => 10,
            'page_info' => $page_info,
            'rel' => $rel
        );
        $products = $this->common->rest_api('/admin/api/2022-04/products.json', $page_array, 'GET', $get_details->access_token, $shop_url);
        $product_list = json_decode($products['body'], true);
        $headers = $products['headers'];
        $link_array = array();
        if (strpos($headers['link'], ',')  !== false) {
            $link_array = explode(',', $headers['link']);
        } else {
            $link = $headers['link'];
        }
        //Create variables for the new page infos
        $prev_link = '';
        $next_link = '';

        //Check if the $link_array variable's size is more than one
        if (sizeof($link_array) > 1) {
            $prev_link = $link_array[0];
            $prev_link = $this->common->str_btwn($prev_link, '<', '>');

            $param = parse_url($prev_link);
            parse_str($param['query'], $prev_link);
            $prev_link = $prev_link['page_info'];

            $next_link = $link_array[1];
            $next_link = $this->common->str_btwn($next_link, '<', '>');

            $param = parse_url($next_link);
            parse_str($param['query'], $next_link);

            $next_link = $next_link['page_info'];
        } else {
            $rel = explode(";", $headers['link']);
            $rel = $this->common->str_btwn($rel[1], '"', '"');

            if ($rel == "previous") {
                $prev_link = $link;
                $prev_link = $this->common->str_btwn($prev_link, '<', '>');

                $param = parse_url($prev_link);
                parse_str($param['query'], $prev_link);

                $prev_link = $prev_link['page_info'];

                $next_link = "";
            } else {
                $next_link = $link;
                $next_link = $this->common->str_btwn($next_link, '<', '>');

                $param = parse_url($next_link);
                parse_str($param['query'], $next_link);

                $next_link = $next_link['page_info'];

                $prev_link = "";
            }
        }

        $html = '';

        // $products = json_decode($products['data'], true);

        foreach ($product_list as $product) {
            foreach ($product as $key => $value) {
                $image = count($value['images']) > 0 ? $value['images'][0]['src'] : "";
                $html .= '<tr>';
                $html .= '<td><label class="containerCheckBox marleft20"><input type="checkbox"><span class="checkmark"></span></label></td>';
                $html .= '<td>' . $value['id'] . '</td>';
                $html .= '<td>' . $value['title'] . '</td>';
                $html .= '<td>' . $value['status'] . '</td>';
            }
        }
        echo json_encode(array('prev' => $prev_link, 'next' => $next_link, 'html' => $html));
    }
    public function import_size_chart()
    {


        $get_details = $this->user_model->get_tokens($_GET['shop']);
        $size_cart_api = array();
        $size_cart_api['apikey'] = 'XYZ';
        $size_cart_api['storeId'] = $get_details->id;





        $validation =  \Config\Services::validation();
        $data = array();
        $data['error_data'] = array();
        $data['sizes_label'] = $this->user_model->get_sizes_label($_GET['shop']);

        $data['get_store_collections'] = $this->user_model->get_collections($_GET['shop']);
        $data['chart_details'] = array();
        $sizes_array = array('xxs', 'xs', 's', 'm', 'l', 'xl', 'xxl', 'xxxl');
        $data['sizes_value_array'] = array('xxs' => 24, 'xs' => 26, 's' => 28, 'm' => 30, 'l' => 32, 'xl' => 34, 'xxl' => 36, 'xxxl' => 38);
        $data['sizes_array'] = $sizes_array;
        if ($this->request->getVar('scid')) {

            $data['chart_details'] =  $this->user_model->get_size_chart($_GET['shop'], $this->request->getVar('scid'));
            // echo "<pre>";
            // print_r($data['chart_details']);
            // echo "</pre>";
            // die();
        }
        //insert size chart
        if ($this->request->getPost('add_import_size')) {
            //     echo "<pre>"; print_r($this->request->getPost()); echo "</pre>";

            // echo "<pre>"; print_r($addssize_cart_api); echo "</pre>";

            //     die();


            $validrules = [
                'size_chart_name' => ['label' => 'Size Chart Name', 'rules' => 'required'],
                'size_chart_vendor' => ['label' => 'Vendor', 'rules' => 'required'],
            ];

            if (!$this->validate($validrules)) {
                $data['error_data'] = $validation->getErrors();
            } else {
                $addssize_cart_api = array();
                $check_old_records = $this->user_model->check_size_chart($this->request->getPost('size_chart_name'), $_GET['shop']);
                if (empty($check_old_records)) {
                    //$chartid = uniqid();
                    $chartid = time();

                    foreach ($this->request->getPost('size_name') as $key => $value) {


                        $insert_array = array(
                            "chart_id" => $chartid,
                            "chart_name" => addslashes(htmlspecialchars($this->request->getPost('size_chart_name'))),
                            "size_chart_unit" => addslashes(htmlspecialchars($this->request->getPost('size_chart_unit'))),
                            "vendor_id" => addslashes(htmlspecialchars($this->request->getPost('size_chart_vendor'))),
                            "size" => addslashes(htmlspecialchars($value)),
                            "size_value" => addslashes(htmlspecialchars($this->request->getPost('size_waist')[$key])),
                            "neck_or_collar" => addslashes(htmlspecialchars($this->request->getPost('size_neck_collar')[$key])),
                            "across_shoulder" => addslashes(htmlspecialchars($this->request->getPost('size_shoulders')[$key])),
                            "sleeve" => addslashes(htmlspecialchars($this->request->getPost('size_sleeve')[$key])),
                            "waist" => addslashes(htmlspecialchars($this->request->getPost('size_waist')[$key])),
                            "chest" => addslashes(htmlspecialchars($this->request->getPost('size_chest')[$key])),
                            "low_waist_trouser" => addslashes(htmlspecialchars($this->request->getPost('size_low_waist_trouser')[$key])),
                            "top_length" => addslashes(htmlspecialchars($this->request->getPost('size_top_length')[$key])),
                            "hips" => addslashes(htmlspecialchars($this->request->getPost('size_hips')[$key])),
                            "trouser_inseam" => addslashes(htmlspecialchars($this->request->getPost('size_trouser_inseam')[$key])),
                            "trouser_outseam" => addslashes(htmlspecialchars($this->request->getPost('size_trouser_outseam')[$key])),
                            "shop_url" => addslashes(htmlspecialchars($_GET['shop'])),
                        );

                        // echo "<pre>"; print_r($insert_array); echo "</pre>";
                        $returnid = $this->user_model->track_size_chart($insert_array);


                        if ($this->request->getPost('size_waist')[$key] == 0 || $this->request->getPost('size_waist')[$key] == "") {
                            $waist_size = null;
                        } else {
                            $waist_size = addslashes(htmlspecialchars($this->request->getPost('size_waist')[$key]));
                        }

                        if ($this->request->getPost('size_neck_collar')[$key] == 0 || $this->request->getPost('size_neck_collar')[$key] == "") {
                            $neck_collar = null;
                        } else {
                            $neck_collar = addslashes(htmlspecialchars($this->request->getPost('size_neck_collar')[$key]));
                        }

                        if ($this->request->getPost('size_shoulders')[$key] == 0 || $this->request->getPost('size_shoulders')[$key] == "") {
                            $shoulders_size = null;
                        } else {
                            $shoulders_size = addslashes(htmlspecialchars($this->request->getPost('size_shoulders')[$key]));
                        }

                        if ($this->request->getPost('size_sleeve')[$key] == 0 || $this->request->getPost('size_sleeve')[$key] == "") {
                            $sleeve_size = null;
                        } else {
                            $sleeve_size = addslashes(htmlspecialchars($this->request->getPost('size_sleeve')[$key]));
                        }

                        if ($this->request->getPost('size_chest')[$key] == 0 || $this->request->getPost('size_chest')[$key] == "") {
                            $chest_size = null;
                        } else {
                            $chest_size = addslashes(htmlspecialchars($this->request->getPost('size_chest')[$key]));
                        }

                        if ($this->request->getPost('size_low_waist_trouser')[$key] == 0 || $this->request->getPost('size_low_waist_trouser')[$key] == "") {
                            $low_waist_trouser_size = null;
                        } else {
                            $low_waist_trouser_size = addslashes(htmlspecialchars($this->request->getPost('size_low_waist_trouser')[$key]));
                        }

                        if ($this->request->getPost('size_top_length')[$key] == 0 || $this->request->getPost('size_top_length')[$key] == "") {
                            $top_length_size = null;
                        } else {
                            $top_length_size = addslashes(htmlspecialchars($this->request->getPost('size_top_length')[$key]));
                        }

                        if ($this->request->getPost('size_hips')[$key] == 0 || $this->request->getPost('size_hips')[$key] == "") {
                            $hips_size = null;
                        } else {
                            $hips_size = addslashes(htmlspecialchars($this->request->getPost('size_hips')[$key]));
                        }

                        if ($this->request->getPost('size_trouser_inseam')[$key] == 0 || $this->request->getPost('size_trouser_inseam')[$key] == "") {
                            $trouser_inseam_size = null;
                        } else {
                            $trouser_inseam_size = addslashes(htmlspecialchars($this->request->getPost('size_trouser_inseam')[$key]));
                        }

                        if ($this->request->getPost('size_trouser_outseam')[$key] == 0 || $this->request->getPost('size_trouser_outseam')[$key] == "") {
                            $trouser_outseam_size = null;
                        } else {
                            $trouser_outseam_size = addslashes(htmlspecialchars($this->request->getPost('size_trouser_outseam')[$key]));
                        }


                        $addssize_cart_api[] = array(
                            "id" => $returnid,
                            "size" => addslashes(htmlspecialchars($value)),
                            "value" => $chest_size,
                            "unit" => addslashes(htmlspecialchars($this->request->getPost('size_chart_unit'))),
                            "measurements" => array(
                                "id" => $returnid,
                                "neck_or_collar" => $neck_collar,
                                "across_shoulder" => $shoulders_size,
                                "sleeve" => $sleeve_size,
                                "chest" => $chest_size,
                                "waist" => $waist_size,
                                "low_waist_trouser" => $low_waist_trouser_size,
                                "top_length" => $top_length_size,
                                "hips" => $hips_size,
                                "trouser_inseam" => $trouser_inseam_size,
                                "trouser_outseam" => $trouser_outseam_size
                            )
                        );
                    }
                    // die();

                    $size_cart_api['vendors'][] = array(
                        "vendorId" => addslashes(htmlspecialchars($this->request->getPost('size_chart_vendor'))),
                        "sizeCharts" => array(array(
                            "sizeChartId" => $chartid,
                            "sizeChartData" => $addssize_cart_api
                        ))
                    );

                    $get_resposne = $this->common->upload_size_chart($size_cart_api);

                    // echo $get_resposne;
                    // die();

                    echo "<script>top.window.location='https://" . $_GET['shop'] . "/admin/apps/bigthinx-size-app/public/index.php/size-chart-list'</script>";
                    exit();
                } else {
                    $data['error_data']['exist'] = 'Size Chart with same name already exist';
                }
            }
        }

        //update size chart

        if ($this->request->getPost('update_import_size')) {

            $validrules = [
                'size_chart_name' => ['label' => 'Size Chart Name', 'rules' => 'required'],
            ];

            if (!$this->validate($validrules)) {
                $data['error_data'] = $validation->getErrors();
            } else {

                $check_old_records = $this->user_model->check_size_chart_update($this->request->getPost('size_chart_name'), $_GET['shop'], $this->request->getPost('chart_id'));
                if (empty($check_old_records)) {
                    //$chartid = uniqid();

                    foreach ($this->request->getPost('size_name') as $key => $value) {

                        // $get_ids = $this->user_model->get_sizes_ids($value, $_GET['shop'], $this->request->getPost('chart_id'));
                        $get_id = $this->request->getPost('sizeid')[$key];


                        if ($this->request->getPost('size_waist')[$key] == 0 || $this->request->getPost('size_waist')[$key] == "") {
                            $waist_size = null;
                        } else {
                            $waist_size = addslashes(htmlspecialchars($this->request->getPost('size_waist')[$key]));
                        }

                        if ($this->request->getPost('size_neck_collar')[$key] == 0 || $this->request->getPost('size_neck_collar')[$key] == "") {
                            $neck_collar = null;
                        } else {
                            $neck_collar = addslashes(htmlspecialchars($this->request->getPost('size_neck_collar')[$key]));
                        }

                        if ($this->request->getPost('size_shoulders')[$key] == 0 || $this->request->getPost('size_shoulders')[$key] == "") {
                            $shoulders_size = null;
                        } else {
                            $shoulders_size = addslashes(htmlspecialchars($this->request->getPost('size_shoulders')[$key]));
                        }

                        if ($this->request->getPost('size_sleeve')[$key] == 0 || $this->request->getPost('size_sleeve')[$key] == "") {
                            $sleeve_size = null;
                        } else {
                            $sleeve_size = addslashes(htmlspecialchars($this->request->getPost('size_sleeve')[$key]));
                        }

                        if ($this->request->getPost('size_chest')[$key] == 0 || $this->request->getPost('size_chest')[$key] == "") {
                            $chest_size = null;
                        } else {
                            $chest_size = addslashes(htmlspecialchars($this->request->getPost('size_chest')[$key]));
                        }

                        if ($this->request->getPost('size_low_waist_trouser')[$key] == 0 || $this->request->getPost('size_low_waist_trouser')[$key] == "") {
                            $low_waist_trouser_size = null;
                        } else {
                            $low_waist_trouser_size = addslashes(htmlspecialchars($this->request->getPost('size_low_waist_trouser')[$key]));
                        }

                        if ($this->request->getPost('size_top_length')[$key] == 0 || $this->request->getPost('size_top_length')[$key] == "") {
                            $top_length_size = null;
                        } else {
                            $top_length_size = addslashes(htmlspecialchars($this->request->getPost('size_top_length')[$key]));
                        }

                        if ($this->request->getPost('size_hips')[$key] == 0 || $this->request->getPost('size_hips')[$key] == "") {
                            $hips_size = null;
                        } else {
                            $hips_size = addslashes(htmlspecialchars($this->request->getPost('size_hips')[$key]));
                        }

                        if ($this->request->getPost('size_trouser_inseam')[$key] == 0 || $this->request->getPost('size_trouser_inseam')[$key] == "") {
                            $trouser_inseam_size = null;
                        } else {
                            $trouser_inseam_size = addslashes(htmlspecialchars($this->request->getPost('size_trouser_inseam')[$key]));
                        }

                        if ($this->request->getPost('size_trouser_outseam')[$key] == 0 || $this->request->getPost('size_trouser_outseam')[$key] == "") {
                            $trouser_outseam_size = null;
                        } else {
                            $trouser_outseam_size = addslashes(htmlspecialchars($this->request->getPost('size_trouser_outseam')[$key]));
                        }





                        //  echo $value;

                        $update_array = array(
                            "chart_name" => addslashes(htmlspecialchars($this->request->getPost('size_chart_name'))),
                            "size_chart_unit" => addslashes(htmlspecialchars($this->request->getPost('size_chart_unit'))),
                            "vendor_id" => $this->request->getPost('vendor_id'),
                            "size" => addslashes(htmlspecialchars($value)),
                            "size_value" => addslashes(htmlspecialchars($this->request->getPost('size_waist')[$key])),
                            "neck_or_collar" => addslashes(htmlspecialchars($this->request->getPost('size_neck_collar')[$key])),
                            "across_shoulder" => addslashes(htmlspecialchars($this->request->getPost('size_shoulders')[$key])),
                            "sleeve" => addslashes(htmlspecialchars($this->request->getPost('size_sleeve')[$key])),
                            "waist" => addslashes(htmlspecialchars($this->request->getPost('size_waist')[$key])),
                            "chest" => addslashes(htmlspecialchars($this->request->getPost('size_chest')[$key])),
                            "low_waist_trouser" => addslashes(htmlspecialchars($this->request->getPost('size_low_waist_trouser')[$key])),
                            "top_length" => addslashes(htmlspecialchars($this->request->getPost('size_top_length')[$key])),
                            "hips" => addslashes(htmlspecialchars($this->request->getPost('size_hips')[$key])),
                            "trouser_inseam" => addslashes(htmlspecialchars($this->request->getPost('size_trouser_inseam')[$key])),
                            "trouser_outseam" => addslashes(htmlspecialchars($this->request->getPost('size_trouser_outseam')[$key])),
                            "shop_url" => addslashes(htmlspecialchars($_GET['shop'])),
                        );
                        // echo "<pre>";
                        // print_r($update_array);
                        // echo "</pre>";
                        $sizechrtid = $this->user_model->update_size_chart($_GET['shop'], $this->request->getPost('chart_id'), $update_array, $get_id);

                        $update_size_cart_api[] = array(
                            "id" => $sizechrtid,
                            "size" => addslashes(htmlspecialchars($value)),
                            //"value" => addslashes(htmlspecialchars($this->request->getPost('size_' . $value . '_value'))),
                            "value" => $waist_size,
                            "unit" => addslashes(htmlspecialchars($this->request->getPost('size_chart_unit'))),
                            "measurements" => array(
                                "id" => $sizechrtid,
                                "neck_or_collar" => $neck_collar,
                                "across_shoulder" => $shoulders_size,
                                "sleeve" => $sleeve_size,
                                "chest" => $chest_size,
                                "waist" => $waist_size,
                                "low_waist_trouser" => $low_waist_trouser_size,
                                "top_length" => $top_length_size,
                                "hips" => $hips_size,
                                "trouser_inseam" => $trouser_inseam_size,
                                "trouser_outseam" => $trouser_outseam_size,
                            )
                        );
                    }
                    $size_cart_api = array();
                    $size_cart_api['sizeChartId'] = $this->request->getPost('chart_id');
                    $size_cart_api['sizeChartData'] = $update_size_cart_api;

                    // echo "<pre>";
                    // print_r($size_cart_api);
                    // echo "</pre>";

                    $get_resposne = $this->common->update_sizechart_api($size_cart_api);
                    // echo $get_resposne;
                    //  echo json_encode($size_cart_api);
                    // echo "<pre>";
                    // print_r($size_cart_api);
                    // echo "</pre>";
                    //die();
                    echo "<script>top.window.location='https://" . $_GET['shop'] . "/admin/apps/bigthinx-size-app/public/index.php/size-chart-list'</script>";
                    // return redirect()->to('https://' . $_GET['shop'] . '/admin/apps/bigthinx-size-app/public/index.php/size-chart-list');
                    exit();
                } else {

                    $data['error_data']['exist'] = 'Size Chart with same name already exist';
                }
            }
            // die();
        }
        $data['vendors_list'] = $this->user_model->get_vendor_list($_GET['shop']);


        echo view('templates/header');
        echo view('import_size_chart', $data);
        echo view('templates/footer');
    }

    public function size_chart_list()
    {


        $data = array();
        $data['chart_details'] = $this->user_model->get_store_chart_list($_GET['shop']);

        $data['vendors_list'] = $this->user_model->get_vendor_list($_GET['shop']);

        echo view('templates/header');
        echo view('size_chart_list', $data);
        echo view('templates/footer');
    }

    public function match_collection()
    {


        $data = array();

        $data['get_store_collections'] = $this->user_model->get_collections($_GET['shop']);
        $data['get_collections_assgn'] = $this->user_model->get_assign_collections($_GET['shop']);
        //echo"<pre>"; print_r($data['get_assign_collections']); echo "</pre>";
        if ($this->request->getPost('match_coll')) {
            foreach ($this->request->getPost('bigthingx_coll') as $key => $value) {
                if ($value != "") {
                    $assign_array = array(
                        "collections_id" => $this->request->getPost('cole_id')[$key],
                        "bightingx_coll_id" => $value,
                        "shop_url" => $_GET['shop']
                    );
                    $this->user_model->match_coll_track($_GET['shop'], $assign_array);
                }
            }
            echo "<script>top.window.location='https://" . $_GET['shop'] . "/admin/apps/bigthinx-size-app/public/index.php/match-collection'</script>";
            exit();
        }

        echo view('templates/header');
        echo view('match_collection', $data);
        echo view('templates/footer');
    }

    public function create_size_label()
    {


        $data = array();

        $data['sizes_label'] = $this->user_model->get_sizes_label($_GET['shop']);
        $data['sizes_array'] = array('xxs', 'xs', 's', 'm', 'l', 'xl', 'xxl', 'xxxl');
        if ($this->request->getPost('size_chart_save_label')) {
            foreach ($this->request->getPost('size_label') as $key => $value) {

                $assign_array = array(
                    "actual_sizes" => $this->request->getPost('actual_sizes')[$key],
                    "sizes_label" => $value,
                    "shop_url" => $_GET['shop']
                );
                $this->user_model->match_sizes_label($_GET['shop'], $assign_array);
            }
            echo "<script>top.window.location='https://" . $_GET['shop'] . "/admin/apps/bigthinx-size-app/public/index.php/sizes-label'</script>";
            exit();
        }

        echo view('templates/header');
        echo view('size_chart_label', $data);
        echo view('templates/footer');
    }


    public function add_vendors()
    {

        $data = array();
        $validation =  \Config\Services::validation();

        if ($this->request->getVar('vid')) {

            $data['get_vendors_list'] =  $this->user_model->get_vendors_list($_GET['shop'], $this->request->getVar('vid'));
            // echo "<pre>";
            // print_r($data['get_vendors_list']);
            // echo "</pre>";
        }

        if ($this->request->getPost('save_vendor')) {

            $validrules = [
                'vendor_name' => ['label' => 'Vendor Name', 'rules' => 'required'],
            ];

            if (!$this->validate($validrules)) {
                $data['error_data'] = $validation->getErrors();
            } else {
                $vendor_array = array(
                    "vendor_name" => $this->request->getPost('vendor_name'),
                    "created_at" => date('Y-m-d'),
                    "shop_url" => $_GET['shop']
                );
                $this->user_model->track_vendor_name($vendor_array);
                $session = session();

                $session->setFlashdata("message", "This message is for end users #1");
                echo "<script>top.window.location='https://" . $_GET['shop'] . "/admin/apps/bigthinx-size-app/public/index.php/add-vendors'</script>";
            }
        }

        if ($this->request->getPost('update_vendor')) {

            $validrules = [
                'vendor_name' => ['label' => 'Vendor Name', 'rules' => 'required'],
            ];

            if (!$this->validate($validrules)) {
                $data['error_data'] = $validation->getErrors();
            } else {
                $vendor_array = array(
                    "vendor_name" => $this->request->getPost('vendor_name')
                );
                $this->user_model->update_vendor_name($vendor_array, $this->request->getPost('vend_id'), $_GET['shop']);

                echo "<script>top.window.location='https://" . $_GET['shop'] . "/admin/apps/bigthinx-size-app/public/index.php/add-vendors'</script>";
            }
        }
        $data['vendors_list'] = $this->user_model->get_vendor_list($_GET['shop']);

        echo view('templates/header');
        echo view('add_vendors', $data);
        echo view('templates/footer');
    }

    public function vendors_list()
    {

        $data = array();
        $data['vendors_list'] = $this->user_model->get_vendor_list($_GET['shop']);


        echo view('templates/header');
        echo view('vendors_list', $data);
        echo view('templates/footer');
    }
    public function app_setting()
    {
        $data = array();

        $data['app_settings'] = $this->user_model->get_setting_details($_GET['shop']);
        //echo "<pre>"; print_r($data['app_settings']); echo"</pre>";

        if ($this->request->getPost('update_settings')) {
            $update_settings = array(
                // "font_size" => $this->request->getPost('front_end_font_size'),
                // "text_label" => $this->request->getPost('front_end_text_heading'),
                // "button_color" => $this->request->getPost('popup_button_color'),
                // "text_heading_color" => $this->request->getPost('text_heading_color'),
                "custom_css" => htmlspecialchars($this->request->getPost('app_custom_css')),
                "custom_content_css" => htmlspecialchars($this->request->getPost('app_custom_content_css')),
                "shop_url" => $_GET['shop']
            );
            $this->user_model->update_app_settings($update_settings);

            echo "<script>top.window.location='https://" . $_GET['shop'] . "/admin/apps/bigthinx-size-app/public/index.php/setting'</script>";
        }
        echo view('templates/header');
        echo view('app_settings', $data);
        echo view('templates/footer');
    }
    public function app_configuration()
    {
        $data = array();
        echo view('templates/header');
        echo view('app_configuration', $data);
        echo view('templates/footer');
    }
    public function getting_started_page()
    {
        $data = array();
        echo view('templates/header');
        echo view('getting_started', $data);
        echo view('templates/footer');
    }
    public function get_subscribe()
    {
        $get_details = $this->user_model->get_tokens($_GET['shop']);

        $get_subscribe = $this->common->rest_api('/admin/api/2022-04/application_charges.json', array("application_charge" => array("name" => "Start", "price" => "40", "return_url" => 'https://' . esc($_GET['shop']) . '/admin/apps/bigthinx-size-app/public/index.php/return_url?shop=' . $_GET['shop'] . '', "test" => true)), 'POST', $get_details->access_token, $_GET['shop']);

        //echo $get_subscribe;

        $get_reposne = json_decode($get_subscribe['body'], true);
        // echo "<pre>";
        // print_r($get_reposne);
        // echo "</pre>";

        $trackarray = array(
            "shop_url" => $_GET['shop'],
            "charged_id" => $get_reposne['application_charge']['id'],
            "plan_name" => 'Start',
            "plan_price" => 40,
            "scan_count" => 5000,
            "updated_scan_count" => 5000,
            "plan_status" => $get_reposne['application_charge']['status']
        );

        $this->user_model->track_store_subscribe($trackarray);

        echo "<script>top.window.location='" . $get_reposne['application_charge']['confirmation_url'] . "'</script>";
    }
    public function get_subscribe_return()
    {
        // echo "<pre>";
        // print_r($_REQUEST);
        // echo "</pre>";

        $get_details = $this->user_model->get_tokens($_GET['shop']);

        $get_subscribe_list = $this->common->rest_api('/admin/api/2022-04/application_charges/' . $_REQUEST['charge_id'] . '.json', array(), 'GET', $get_details->access_token, $_GET['shop']);


        $get_status = json_decode($get_subscribe_list['body'], true);


        $update_data = array(
            "shop_url" => $_GET['shop'],
            "charged_id" => $_REQUEST['charge_id'],
            "plan_status" => $get_status['application_charge']['status'],
            "activate_date" => date('Y-m-d'),
            "plan_validity" => date('Y-m-d', strtotime('+30 days'))
        );

        $this->user_model->update_plan_after_payment($update_data);
        // echo "<pre>";
        // print_r($get_status);
        // echo "</pre>";
        // die();
        echo "<script>top.window.location='https://" . $_GET['shop'] . "/admin/apps/bigthinx-size-app'</script>";
    }
    public function get_scan_count()
    {
        $curl = curl_init();
        $current_year_date = date('Y');
        $current_month_date = date("n");
        $complete_date_month = $current_month_date . '-' . $current_year_date;
        $get_details = $this->user_model->get_tokens($_GET['shop']);
        if (!empty($get_details)) {

            curl_setopt_array($curl, array(
                CURLOPT_URL => 'https://shopifyapp.lyfsize.me/cgcolors/v2/getTotalCount?storeId=' . $get_details->id . '&month=' . $complete_date_month,
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => '',
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 0,
                CURLOPT_FOLLOWLOCATION => true,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => 'GET',
            ));

            $response = curl_exec($curl);

            curl_close($curl);
            $get_resposne =  json_decode($response);
            // echo "<pre>";
            // print_r($get_resposne);
            // echo "</pre>";
            if (is_array($get_resposne)) {
                //echo "array";

                $update_data_scan = array(
                    "shop_url" => $_GET['shop'],
                    "updated_scan_count" => $get_resposne[0]->totalCount,
                );

                $this->user_model->update_scan_count($update_data_scan);
            } else {
                // echo "string";
            }
        }
    }
}
